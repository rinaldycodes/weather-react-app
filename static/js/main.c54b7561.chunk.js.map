{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["weatherApi","App","useState","query","setQuery","weather","setWeather","city","className","style","backgroundImage","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEMA,EACC,mCADDA,EAEE,2CAkEOC,MA/Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA6BTC,EAAOJ,EAEX,OACE,qBAAKK,UAAU,MAAMC,MAAO,CAAEC,gBAAiB,6CAA+CH,EAAO,MAArG,SACE,iCACE,qBAAKC,UAAU,aAAf,SACE,uBAAOG,KAAK,OAAOH,UAAU,aAAaI,YAAY,YAAYC,SAAU,SAACC,GAAD,OAAOV,EAASU,EAAEC,OAAOC,QAAQA,MAAOb,EAAOc,WA/BpH,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIpB,EAAJ,qBAAgCG,EAAhC,+BAA4DH,IAC9DqB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLlB,EAAWkB,GACXpB,EAASD,WA2Ba,oBAAhBE,EAAQoB,KACd,gCACE,sBAAKjB,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGH,EAAQqB,KADX,KACmBrB,EAAQsB,IAAIC,WAE/B,qBAAKpB,UAAU,OAAf,SA5BQ,SAACqB,GAGnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GAiBFE,CAAY,IAAIC,WAGzC,sBAAK/B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBgC,KAAKC,MAAMpC,EAAQoB,KAAKiB,MAA/C,YACA,qBAAKlC,UAAU,UAAf,SAA0BH,EAAQA,QAAQ,GAAGoB,aAIjD,sBAAKjB,UAAU,UAAf,UACE,0CACA,oCACA,4DClDGmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c54b7561.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst weatherApi = {\n  key: \"d7d9365393b843235e601be8967c68d1\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`${weatherApi.base}weather?q=${query}&units=metric&APPID=${weatherApi.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(query);\n        });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    // let months = [\"Januari\", \"Februari\", \"Maret\", \"April\", \"Mei\", \"Juni\", \"Juli\", \"Agustus\", \"September\", \"Oktober\", \"Nopember\", \"Desember\"];\n    // let days = [\"Minggu\", \"Senin\", \"Selasa\", \"Rabu\", \"Kamis\", \"Jum'at\", \"Sabtu\"];\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date} ${month} ${year}`;\n  };\n\n  let city = query;\n\n  return (\n    <div className=\"app\" style={{ backgroundImage: 'url(\"https://source.unsplash.com/800x450/?' + city + '\")' }}>\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Search...\" onChange={(e) => setQuery(e.target.value)} value={query} onKeyPress={search} />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}â„ƒ</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"welcome\">\n            <h2>Welcome!</h2>\n            <h3>To</h3>\n            <h1>Weather React App</h1>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}